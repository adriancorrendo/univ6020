---
title: "Reproducible Data Science with R II"
subtitle: "Why R and R essentials"
author: "Adrian A. Correndo"
date: "2024-11-06"
editor: source
format:
  revealjs: 
    incremental: true
    slide-number: true
    show-slide-number: all
    toc: true
    toc_float: true
    toc-depth: 1
    toc-location: body
    toc-title: "Contents"
    smaller: true
    scrollable: true
highlight-style: oblivion  
---


# Why R?


## Why R?

::: columns
::: {.column width="70%"}
-   **1. Open-Source**
    -   Free to use and modify, with contributions from a large community.
-   **2. Multi-Platform**
    -   Runs on Windows, macOS, and Linux, making it versatile for collaboration.
-   **3. Community Support**
    -   Strong online help through forums, tutorials, and dedicated resources.
-   **4. Continuous Development**
    -   Regular updates keep R on the leading edge of data science.
-   **5. Reproducible Workflows**
    -   Tools like **Rmarkdown** and **Quarto** facilitates the job.
:::

::: {.column width="30%"}
![](https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/R_logo.svg/1448px-R_logo.svg.png?20240131042527){fig-align="right" width="290"}
:::
:::

## Why RStudio?

::: columns
::: {.column width="70%"}
-   **1. An interface to R**
    -   Provides a user-friendly environment to work with R.
-   **2. Integrates various components of an analysis**
    -   Combines data, code, and output in one place, simplifying the workflow.
-   **3. Colored syntax**
    -   Highlights code with colors, making it easier to read and spot errors, improving code clarity.
-   **4. Syntax suggestions**
    -   Offers autocomplete suggestions, which speeds up coding and reduces mistakes.
-   **5. RStudio panels**
    -   Panels for console, scripts, files, and plots, giving quick access to all elements.
    
:::

::: {.column width="30%"}
![](https://upload.wikimedia.org/wikipedia/commons/d/d0/RStudio_logo_flat.svg){fig-align="right" width="400"}
:::
:::


## Rstudio panels

::: fragment
![](images/rstudiopanel.png)
:::

## Why version control? üîÑ

::: columns
::: {.column width="70%"}
-   **1. Track Changes**
    -   Maintain a complete history of edits, making it easy to identify when and why changes were made.
-   **2. Collaborate Seamlessly**
    -   Multiple users can work together without overwriting each other's work, enhancing teamwork.
-   **3. Ensure Data Integrity**
    -   Protect primary data by using branches for experimentation, avoiding accidental overwrites.
-   **4. Boost Reproducibility**
    -   Access exact versions of code and data, enabling others to reproduce your work reliably.
-   **5. Provide Built-in Documentation**
    -   Each change can be documented, helping others understand your workflow and decisions.

:::

::: {.column width="30%"}
![](https://upload.wikimedia.org/wikipedia/commons/e/e0/Git-logo.svg){fig-align="right" width="400"}

<br/>

![](images/GitHub-logo.png){fig-align="right" width="400"}
:::
:::

## What are Git and GitHub?

::: columns
::: {.column width="70%"}
-   **Git**
    -   A version control system that tracks changes in files on your local computer, allowing you to manage versions and revert to previous work.

<br/>

-   **GitHub**
    -   An online platform for hosting Git repositories, enabling easy collaboration, project sharing, and cloud storage.
    
:::

::: {.column width="30%"}
![](https://upload.wikimedia.org/wikipedia/commons/e/e0/Git-logo.svg){fig-align="right" width="400"}

<br/>

![](images/GitHub-logo.png){fig-align="right" width="400"}
:::
:::

## Publishing coding projects

::: columns
::: {.column width="25%"}
[![Retrieve soil data](images/xpolarispaper.png){fig-align="left" width="225"}](https://doi.org/10.1186/s13104-021-05729-y)
:::

::: {.column width="25%"}
[![Retrieving weather data](images/agrometrpaper.png){fig-align="left" width="225"}](https://doi.org/10.1186/s13104-021-05622-8)
:::

::: {.column width="25%"}
[![Soil test correlation analysis](images/soiltestcorrpaper.png){fig-align="left" width="245"}](https://doi.org/10.1016/j.softx.2022.101275)
:::

::: {.column width="25%"}
[![Prediction performance metrics](images/metricapaper.png){fig-align="left" width="225"}](https://doi.org/10.21105/joss.04655)
:::

:::

## Open source review of coding projects

::: columns
::: {.column width="70%"}
[![](images/githubreview.gif){fig-align="right" width="800"}](https://github.com/openjournals/joss-reviews/issues/4655)
:::

::: {.column width="30%"}

<br/>

![](images/GitHub-logo.png){fig-align="right" width="400"}
:::
:::

## Documentation of coding projects

::: columns
::: {.column width="70%"}
[![](images/soiltestcorrdocumentation.png){fig-align="left" width="800"}](https://adriancorrendo.github.io/soiltestcorr/)
:::

::: {.column width="30%"}

<br/>

![](images/GitHub-logo.png){fig-align="right" width="400"}
:::
:::

## Key Principles for Reproducibility

-   **Documentation and Code Comments**
    -   Metadata: information about data origin, format, structure, and meaning.
    -   Code comments: provide explanations directly in scripts for future reference.
    
<br/>
    
-   **Version Control (Git/GitHub)**
    -   Tracks changes to code over time, making it easy to return to previous versions.
    -   Useful for collaborative work and transparency.
    
<br/>

-   **Organization & Structured coding...**

## Basic Project Structure

-   **Organizing Projects for Reproducibility**

    -   Folder setup: `data/`, `code/`, `results/` folders for logical organization.
    -   README file: brief guide to project structure, data sources, and analysis steps.

-   **Sample Project Structure**

    ```         
    project_directory/
    ‚îú‚îÄ‚îÄ data/       # Raw and processed datasets
    ‚îú‚îÄ‚îÄ code/    # Code files for data processing
    ‚îú‚îÄ‚îÄ results/    # Generated results, plots, and reports
    ‚îú‚îÄ‚îÄ README.md   # Overview of the project structure and purpose
    ```

::: fragment
![](images/projectfolders.png)
:::


# Essentials of R üîç

-   Let's cover the core building blocks of R for data science.

## Objectives üìå

-   Types of R objects and their uses.
-   Key functions and data wrangling basics.
-   Tidy data concepts.

## Common R Objects üß©

-   **Scalars**: Single data point (e.g., `5`, or `a`)
-   **Vectors**: Simple data storage (e.g., `c(1, 2, 3)`)
-   **Lists**: Collection of various data types
-   **Dataframes**: Tabular data (like spreadsheets)
-   **Tibbles**: Enhanced dataframes with cleaner output
-   **Matrices**: data arranged in rows and columns (2D)

## Object

::: fragment
```{r}
#| label: object
#| echo: true
20

20/4
```
:::

::: fragment
Use `<-` or `=`
:::

::: fragment
```{r}
#| echo: true
a <- 20/4

a
```
:::

## Vector

It's a collection of numbers, arithmetic expressions, logical values or character strings for example. Within a table, it could be a row or a column

::: fragment
```{r}
#| label: vector
#| echo: true
# numeric
b <- c(3, 6, 10)
b

c <- "Workshop"
c

```
:::

## Tabular data

::: fragment
### 1. Data Frame

It's a `tabular` arrange of vectors (i.e. 2-dimensional, rectangular). Structure used to store values of any data type. The most common way to store data in R.
:::

::: fragment
```{r}
#| echo: true
d <- data.frame(Number = b,
                ID = c)

d
```
:::

::: fragment
<br/>

### 2. Tibble

It's a modern version of a data frame. It's a data frame with class `tbl_df` and `tbl` and it only prints the first 10 rows and all the columns that fit on the screen.
:::

::: fragment
```{r}
#| echo: true
tb <- tibble::as_tibble(d)

tb
```
:::

## Matrix

A collection of elements of the same data type (numeric, character, or logical) arranged into a fixed number of rows and columns.

::: fragment
```{r}
#| echo: true
m <- matrix(c(b,b),
            nrow = 2)

m
```
:::

## List

-   A generic object consisting of an ordered collection of objects. <br/>

-   Lists are one-dimensional, heterogeneous data structures. <br/>

-   The list can be a list of vectors, matrices, characters, functions, etc... <br/>

-   A list is a vector but with heterogeneous data elements.

::: fragment
```{r}
#| echo: true
f <- list("a" = a, "b" = b,
          "c" = c, "d" = d)
f

class(f)
```
:::

## Functions ‚öôÔ∏è

::: fragment
-   A function is a block of code that performs a specific task. <br/>
-   Types:
    -   **Pre-built functions**: e.g., `mean()`, `sum()`
    -   **Custom functions**: How to define and use
:::

::: fragment
::: callout-tip
-   Functions make code reusable and organized. Define once, use often! üí°
-   A function is executed when it is **called**. <br/>
-   You can pass data, numbers, lists, dataframes, matrices, etc... <br/>
:::
:::

::: fragment
```{r}
#| echo: true
arguments <- NULL 
fx <- function(arguments) {
        ## Do something
}

```
:::

::: fragment
Example of a function to calculate the mean

```{r}
#| echo: true
fx <- function(x, ...) {
        mean(x)
}

fx(b)

```
:::

## Argument

An argument is a value you pass to a function when calling it. <br/>

::: fragment
```{r}
#| echo: true
b2 <- c(3, 6, 10, NA)
b2

fx(b2, na.rm = T)

# The order of the arguments is important
# But it can be overriden by calling the name of the argument
fx(na.rm = T, x = b2)
```
:::

## Packages

::: fragment
A package is a collection of R functions, data sets, and compiled code in a well-defined format. 

-   Packages are intended to solve specific problems or perform specific tasks. 

-   There are currently thousands of packages available (+21,000 on CRAN only). 
:::

::: fragment

![](images/packages.png){fig-align="center" width="600"}
:::

## Packages

<br/>

![](images/cranpackages.png){fig-align="center" width="800"}

# Why TIDY data?

## Tidyverse

::: fragment
From the hand of the family of packages called [Tidyverse](https://www.tidyverse.org/), the "tidy data" framework changed the way we code and work in R for data science. Tidy datasets are easy to manipulate, model and visualize, and have a specific structure [@wickham2014]:
:::

-   Each variable is a column,

-   Each observation is a row, and

-   Each value have its own cell.

::: fragment
![](images/tidy-1.png) <br/>

**Tidy-data structure**. Following three rules makes a dataset tidy: variables are in columns, observations are in rows, and values are in cells. Source: Wickham (2017).
:::

## Free HTML books

::: {layout-ncol="2"}
[![](https://d33wubrfki0l68.cloudfront.net/b88ef926a004b0fce72b2526b0b5c4413666a4cb/24a30/cover.png){height="300"}](https://r4ds.had.co.nz/)

[![](https://www.tmwr.org/images/cover.png){height="300"}](https://www.tmwr.org/)
:::

## Summary & Key Takeaways

-   Data literacy and reproducibility are essential in modern agriculture.
-   Reproducible analyses build credibility and foster collaboration.

------------------------------------------------------------------------

## THANK YOU!

acorrend\@uoguelph.ca

::: {style="text-align: right; font-size: 0.75em"}
Adrian A. Correndo\
Assistant Professor\
Sustainable Cropping Systems\
Department of Plant Agriculture\
University of Guelph\
:::

Rm 226, Crop Science Bldg \| Department of Plant Agriculture

Ontario Agricultural College \| University of Guelph \| 50 Stone Rd E, Guelph, ON-N1G 2W1, Canada.

<br/>

### Contact me

|                                                                                               |                                                                                                                                          |                                                                                                                            |
|--------------------|----------------------------|-------------------------|
| [![](images/X_logo.png.webp){fig-align="center" width="60"}](http://twitter.com/aacorrendo)   | [![](images/linkedin-icon.png){fig-align="center" width="60"}](https://www.linkedin.com/in/adriancorrendo/)                              | [![](images/github-brands.svg){fig-align="center" width="60" height="60"}](http://github.com/adriancorrendo)               |
| [![](images/orcid.png){fig-align="center" width="60"}](https://orcid.org/0000-0002-4172-289X) | [![](images/768px-Google_Scholar_logo.png){fig-align="center" width="60"}](https://scholar.google.com/citations?user=4h88EXkAAAAJ&hl=en) | [![](images/ResearchGate_icon.png){fig-align="center" width="60"}](https://www.researchgate.net/profile/Adrian-Correndo-2) |
