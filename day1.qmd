---
title: "Reproducible Data Science with R"
author: "Adrian A. Correndo"
date: "2024-11-04"
editor: source
format:
  revealjs: 
    incremental: true
    slide-number: true
    show-slide-number: all
    toc: true
    toc_float: true
    toc-depth: 1
    toc-location: body
    toc-title: "Contents"
    smaller: true
    scrollable: true
highlight-style: oblivion  
---

## Welcome üëã

-   **Goal**: Gain foundational knowledge and understand how data science can improve agricultural practices.
-   Let's dive into it with an emphasis on reproducibility and data literacy.

::: fragment
::: callout-tip
-   **Remember**: Questions and discussions are encouraged! üí¨
:::
:::

## Objectives for Today üìå

-   Define core concepts:
    -   Data Science,
    -   Data Literacy,
    -   Reproducibility.
-   Understand the role of **reproducible data science** in agriculture.
-   Explore **challenges** and **opportunities**.

# Core concepts

## What is Data Science in Agriculture? üå±

-   Applying data engineering, analysis, statistics, and machine learning to solve agricultural problems.
-   **Examples**: Precision agriculture, yield forecasting, environmental monitoring.

## Key Definitions üìñ

::: columns
::: {.column width="55%"}
-   **Data Science**: Extracting insights from data using algorithms and statistical methods. <br/>

-   **Data Literacy**: Skills to read, interpret, and analyze data. <br/>

-   **Reproducibility**: Ensuring analyses can be recreated by others.
:::

::: {.column width="45%"}
::: fragment
::: callout-note
**Why does reproducibility matter?**

-   Trustworthy results,

-   transparency, &

-   collaboration in research.
:::
:::
:::
:::

## Challenges in Data Literacy üåê

-   Diverse data sources (weather, soil, crop data)
-   Standardization issues across datasets
-   Data skills gap among ag professionals

## Why does it matter?

::: {.column width="55%"}
-   It is the **#1 skill-gap** in the job market: <br/>

    -   Academia,
    -   Industry,
    -   Government, NGOs, etc.
:::

::: {.column width="45%"}
![](images/reproducibility.png){.absolute top="0" right="0" height="65%"}
:::

-   Is there a REPRODUCIBILITY CRISIS in science?

-   A [Nature survey](https://www.nature.com/articles/533452a) with \~1,600 researchers found that

    -   ***+70%*** failure rate to reproduce another scientist's experiments

    -   ***+50%*** have failed to reproduce their own experiments

    -   ***Main causes***: selective reporting, weak stats, code/data unavailability, etc.

## GOOD NEWS IS...

::: fragment
::: {.column width="100%"}
![](images/repbrush.png){.absolute top="50" left="200" height="100%"}
:::
:::

## **Why Reproducibility in Agriculture?**

-   Agriculture research relies heavily on environmental data, often variable and complex.

-   **We have complex challenges** üóíÔ∏è

    -   Variability due to environmental factors, soil types, and weather patterns.
    -   Complex datasets involving long-term studies, geographical variability.

-   **Opportunities** ‚úÖ

    -   Reproducibility helps stakeholders make reliable, data-driven decisions.
    -   Ensures scientific findings are reliable and valid.
    -   Facilitates collaboration, accountability, and efficiency among researchers and practitioners.

## Challenges in [Ag-research]{style="color:forestgreen"}

::: fragment
### [REPRODUCIBILITY]{style="color:#2a9d8f"} üíª

-   Limited capability to reproduce analyses & results

-   DATA are rarely shared, CODES even less
:::

::: fragment
### [ACCESSIBILITY]{style="color:#023e8a"} üì≤

-   Yet we are not translating enough science into flexible, and transparent decision tools.
:::

::: fragment
"But it all starts with ..."
:::

::: fragment
### [EDUCATION]{style="color:#BA0C2F"} üéì

-   Limited curriculum in applied data science
:::

## Discussion Prompt üí¨

::: fragment
<br/>

### i. Where do you think improved data literacy & reproducibility could impact agriculture the most? {style="color:#bc4749"}

<br/>
:::

::: fragment
::: callout-tip
-   Consider areas like resource management, market predictions, and farm management.
:::
:::

::: fragment
<br/>

### ii. What practical challenges do you face (or may) in implementing them? {style="color:#457b9d"}

<br/>
:::

# What is R?

::: fragment
## What is R? üßÆ

-   **R** is a programming language and environment primarily for statistical analysis, data visualization, and data science.
-   Known for its extensive **statistical libraries**, **data manipulation capabilities**, and **graphics**.
-   Widely used in fields like **data science**, **bioinformatics**, **agriculture**, and **social sciences**.
:::

<br/>

::: fragment
### Brief History of R üìú

-   **Origin**: Developed in the early 1990s by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand.
-   **Inspiration**: R is an implementation of the S language, designed at Bell Laboratories for data analysis.
-   **Open Source**: Released as free, open-source software, leading to a large community of users and contributors.
-   **Popularity**: Today, R is one of the top programming languages for statistical analysis and data science.
:::

# Alternatives to R

## R vs. Excel for Data Wrangling üìä

::: columns
::: {.column width="65%"}
-   **Excel**: Known for ease of use, popular among business and finance professionals.
    -   **Pros**: Intuitive, good for small datasets and quick analysis.
    -   **Cons**: Limited in handling large datasets, lacks reproducibility.
-   **R**: Provides powerful data manipulation packages (e.g., `dplyr`, `tidyr`).
    -   **Pros**: Handles large datasets efficiently, supports complex transformations, fully reproducible.
    -   **Cons**: Requires programming knowledge, steeper learning curve than Excel.
:::

::: {.column width="35%"}
![](https://upload.wikimedia.org/wikipedia/commons/3/34/Microsoft_Office_Excel_%282019‚Äìpresent%29.svg){fig-align="right" width="290"}
:::
:::

::: fragment
::: callout-tip
-   **Tip**: R is highly scalable and is ideal for projects requiring automation, reproducibility, and handling large datasets.
:::
:::

## R vs. SAS for Statistical Analysis üìâ

::: columns
::: {.column width="65%"}
-   **SAS**: A powerful statistical software suite used widely in industries such as healthcare and finance.
    -   **Pros**: Robust for regulatory environments, highly standardized.
    -   **Cons**: Proprietary and costly, limited community contributions.
-   **R**: Offers a vast array of statistical packages and flexibility in method implementation.
    -   **Pros**: Free and open-source, customizable, strong community support.
    -   **Cons**: Requires more coding and configuration for regulatory standards.
:::

::: {.column width="35%"}
![](images/SASlogo.svg){fig-align="right" width="290" title="By SAS Institute - http://www.sas.com, Public Domain, https://commons.wikimedia.org/w/index.php?curid=5291445"}
:::

::: fragment
::: callout-note
-   **Comparison**: R is often chosen for research and academia due to its flexibility and customization, while SAS remains strong in industries needing strict compliance and control.
:::
:::
:::

## R vs Python vs Julia üîç

-   R, Python, and Julia are popular languages in data science and research.
-   Each language has unique strengths, ideal use cases, and licensing considerations.

::: columns
::: {.column width="34%"}
![](https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/R_logo.svg/1448px-R_logo.svg.png?20240131042527){fig-align="right" width="290"}
:::

::: {.column width="33%"}
![](https://upload.wikimedia.org/wikipedia/commons/c/c3/Python-logo-notext.svg){fig-align="right" width="290"}
:::

::: {.column width="33%"}
![](https://upload.wikimedia.org/wikipedia/commons/1/1f/Julia_Programming_Language_Logo.svg){fig-align="right" width="290"}
:::
:::

## R: Strengths and Use Cases üßÆ

::: columns
::: {.column width="65%"}
-   **Designed for Statistics**: R is optimized for statistical analysis, making it ideal for research and academia.
-   **Visualization**: Excellent data visualization libraries like `ggplot2`.
-   **Licensing**: Licensed under **GPL**; many packages are also GPL, with some using MIT or BSD.

::: fragment
### Ideal Use Cases:

-   Data analysis, visualization, and complex statistical modeling.
-   Research and academia where open-source, reproducible code is needed.
-   **Licensing in Production**: GPL may restrict proprietary use; check package licenses carefully.
:::
:::

::: {.column width="35%"}
![](https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/R_logo.svg/1448px-R_logo.svg.png?20240131042527){fig-align="right" width="290"}
:::
:::

## Python: Strengths and Use Cases üêç

::: columns
::: {.column width="65%"}
-   **General-Purpose Language**: Python is popular for both data science and software development.
-   **Machine Learning & AI**: Extensive libraries for ML and AI, such as `scikit-learn`, `TensorFlow`.
-   **Licensing**: PSFL (Python Software Foundation License), highly permissive for proprietary use.

::: fragment
### Ideal Use Cases:

-   End-to-end development, from data wrangling to ML and web development.
-   Production-ready ML and AI applications.
-   **Licensing in Production**: Permissive licenses allow closed-source use, making Python production-friendly.
:::
:::

::: {.column width="33%"}
![](https://upload.wikimedia.org/wikipedia/commons/c/c3/Python-logo-notext.svg){fig-align="right" width="290"}
:::
:::

## Julia: Strengths and Use Cases üöÄ

::: columns
::: {.column width="65%"}
-   **High Performance**: Designed for scientific computing, close to the speed of C/C++.
-   **Ease of Use**: Combines high-level syntax with low-level performance.
-   **Licensing**: MIT license, very permissive for commercial and open-source use.

::: fragment
### Ideal Use Cases:

-   Large-scale simulations, optimization problems, high-performance computing.
-   **Licensing in Production**: MIT license allows proprietary use without restrictions.
:::
:::

::: {.column width="33%"}
![](https://upload.wikimedia.org/wikipedia/commons/1/1f/Julia_Programming_Language_Logo.svg){fig-align="right" width="290"}
:::
:::

## Comparison Summary üìä

::: fragment
::: callout-note
-   **R**: Open-source, powerful for data science, statistical analysis, and visualizations.
-   **Excel**: User-friendly, ideal for simple tasks, but limited for complex data wrangling.
-   **SAS**: Industry-standard for statistical analysis with regulatory requirements, but costly and less flexible than R.
:::
:::

<br/>

::: fragment
| Feature              | R                           | Python                        | Julia                         |
|------------------|------------------|-------------------|------------------|
| **Primary Strength** | Statistics & Visualization  | General-purpose, ML, AI       | High-performance computing    |
| **Performance**      | Moderate                    | Moderate                      | High                          |
| **Licensing**        | GPL (core), MIT, BSD (some) | PSFL, highly permissive       | MIT, highly permissive        |
| **Production Use**   | Limited by GPL              | Very friendly for proprietary | Very friendly for proprietary |
:::

<br/>

::: fragment
::: callout-tip
-   **R**: Best for statistical analysis and visualization, but GPL license may restrict use in proprietary products.
-   **Python**: Strong in ML and AI with highly permissive licensing, making it ideal for production.
-   **Julia**: Excellent for high-performance computing, with permissive licensing suitable for proprietary use.
:::
:::

::: fragment
Choosing the right tool depends on your project's requirements, team skills, and licensing needs for research vs. production.
:::

------------------------------------------------------------------------

# Why R?


## Why R?

::: columns
::: {.column width="70%"}
-   **1. Open-Source**
    -   Free to use and modify, with contributions from a large community.
-   **2. Multi-Platform**
    -   Runs on Windows, macOS, and Linux, making it versatile for collaboration.
-   **3. Community Support**
    -   Strong online help through forums, tutorials, and dedicated resources.
-   **4. Continuous Development**
    -   Regular updates keep R on the leading edge of data science.
-   **5. Reproducible Workflows**
    -   Tools like **Rmarkdown** and **Quarto** facilitates the job.
:::

::: {.column width="30%"}
![](https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/R_logo.svg/1448px-R_logo.svg.png?20240131042527){fig-align="right" width="290"}
:::
:::

## Why RStudio?

::: columns
::: {.column width="70%"}
-   **1. An interface to R**
    -   Provides a user-friendly environment to work with R.
-   **2. Integrates various components of an analysis**
    -   Combines data, code, and output in one place, simplifying the workflow.
-   **3. Colored syntax**
    -   Highlights code with colors, making it easier to read and spot errors, improving code clarity.
-   **4. Syntax suggestions**
    -   Offers autocomplete suggestions, which speeds up coding and reduces mistakes.
-   **5. RStudio panels**
    -   Panels for console, scripts, files, and plots, giving quick access to all elements.
:::

::: {.column width="30%"}
![](https://upload.wikimedia.org/wikipedia/commons/d/d0/RStudio_logo_flat.svg){fig-align="right" width="400"}
:::
:::

## Rstudio panels
![](images/rstudiopanel.png)

## Why version control? üîÑ

::: columns
::: {.column width="70%"}
-   **1. Track Changes**
    -   Maintain a complete history of edits, making it easy to identify when and why changes were made.
-   **2. Collaborate Seamlessly**
    -   Multiple users can work together without overwriting each other's work, enhancing teamwork.
-   **3. Ensure Data Integrity**
    -   Protect primary data by using branches for experimentation, avoiding accidental overwrites.
-   **4. Boost Reproducibility**
    -   Access exact versions of code and data, enabling others to reproduce your work reliably.
-   **5. Provide Built-in Documentation**
    -   Each change can be documented, helping others understand your workflow and decisions.
:::

::: {.column width="30%"}
![](https://upload.wikimedia.org/wikipedia/commons/e/e0/Git-logo.svg){fig-align="right" width="400"}

<br/>

![](images/GitHub-logo.png){fig-align="right" width="400"}
:::
:::

## What are Git and GitHub?

::: columns
::: {.column width="70%"}
-   **Git**
    -   A version control system that tracks changes in files on your local computer, allowing you to manage versions and revert to previous work.

<br/>

-   **GitHub**
    -   An online platform for hosting Git repositories, enabling easy collaboration, project sharing, and cloud storage.
:::

::: {.column width="30%"}
![](https://upload.wikimedia.org/wikipedia/commons/e/e0/Git-logo.svg){fig-align="right" width="400"}

<br/>

![](images/GitHub-logo.png){fig-align="right" width="400"}
:::
:::

## Key Principles for Reproducibility

-   **Documentation and Code Comments**
    -   Metadata: information about data origin, format, structure, and meaning.
    -   Code comments: provide explanations directly in scripts for future reference.
-   **Version Control (Git/GitHub)**
    -   Tracks changes to code over time, making it easy to return to previous versions.
    -   Useful for collaborative work and transparency.
-   **Organization & Structured coding...**

## Basic Project Structure

-   **Organizing Projects for Reproducibility**

    -   Folder setup: `data/`, `code/`, `results/` folders for logical organization.
    -   README file: brief guide to project structure, data sources, and analysis steps.

-   **Sample Project Structure**

    ```         
    project_directory/
    ‚îú‚îÄ‚îÄ data/       # Raw and processed datasets
    ‚îú‚îÄ‚îÄ code/    # Code files for data processing
    ‚îú‚îÄ‚îÄ results/    # Generated results, plots, and reports
    ‚îú‚îÄ‚îÄ README.md   # Overview of the project structure and purpose
    ```

![](images/projectfolders.png)


# Essentials of R üîç

-   Let's cover the core building blocks of R for data science.

## Objectives üìå

-   Types of R objects and their uses.
-   Key functions and data wrangling basics.
-   Tidy data concepts.

## Common R Objects üß©

-   **Scalars**: Single data point (e.g., `5`, or `a`)
-   **Vectors**: Simple data storage (e.g., `c(1, 2, 3)`)
-   **Lists**: Collection of various data types
-   **Dataframes**: Tabular data (like spreadsheets)
-   **Tibbles**: Enhanced dataframes with cleaner output
-   **Matrices**: data arranged in rows and columns (2D)

## Object

::: fragment
```{r}
#| label: object
#| echo: true
20

20/4
```
:::

::: fragment
Use `<-` or `=`
:::

::: fragment
```{r}
#| echo: true
a <- 20/4

a
```
:::

## Vector

It's a collection of numbers, arithmetic expressions, logical values or character strings for example. Within a table, it could be a row or a column

::: fragment
```{r}
#| label: vector
#| echo: true
# numeric
b <- c(3, 6, 10)
b

c <- "Workshop"
c

```
:::

## Tabular data

::: fragment
### 1. Data Frame

It's a `tabular` arrange of vectors (i.e. 2-dimensional, rectangular). Structure used to store values of any data type. The most common way to store data in R.
:::

::: fragment
```{r}
#| echo: true
d <- data.frame(Number = b,
                ID = c)

d
```
:::

::: fragment
<br/>

### 2. Tibble

It's a modern version of a data frame. It's a data frame with class `tbl_df` and `tbl` and it only prints the first 10 rows and all the columns that fit on the screen.
:::

::: fragment
```{r}
#| echo: true
tb <- tibble::as_tibble(d)

tb
```
:::

## Matrix

A collection of elements of the same data type (numeric, character, or logical) arranged into a fixed number of rows and columns.

::: fragment
```{r}
#| echo: true
m <- matrix(c(b,b),
            nrow = 2)

m
```
:::

## List

-   A generic object consisting of an ordered collection of objects. <br/>

-   Lists are one-dimensional, heterogeneous data structures. <br/>

-   The list can be a list of vectors, matrices, characters, functions, etc... <br/>

-   A list is a vector but with heterogeneous data elements.

::: fragment
```{r}
#| echo: true
f <- list("a" = a, "b" = b,
          "c" = c, "d" = d)
f

class(f)
```
:::

## Functions ‚öôÔ∏è

::: fragment
-   A function is a block of code that performs a specific task. <br/>
-   Types:
    -   **Pre-built functions**: e.g., `mean()`, `sum()`
    -   **Custom functions**: How to define and use
:::

::: fragment
::: callout-tip
-   Functions make code reusable and organized. Define once, use often! üí°
-   A function is executed when it is **called**. <br/>
-   You can pass data, numbers, lists, dataframes, matrices, etc... <br/>
:::
:::

::: fragment
```{r}
#| echo: true
arguments <- NULL 
fx <- function(arguments) {
        ## Do something
}

```
:::

::: fragment
Example of a function to calculate the mean

```{r}
#| echo: true
fx <- function(x, ...) {
        mean(x)
}

fx(b)

```
:::

## Argument

An argument is a value you pass to a function when calling it. <br/>

::: fragment
```{r}
#| echo: true
b2 <- c(3, 6, 10, NA)
b2

fx(b2, na.rm = T)

# The order of the arguments is important
# But it can be overriden by calling the name of the argument
fx(na.rm = T, x = b2)
```
:::

## Packages

A package is a collection of R functions, data sets, and compiled code in a well-defined format. <br/>

-   Packages are intended to solve specific problems or perform specific tasks. <br/>

-   There are currently thousands of packages available (+21,000 on CRAN only). <br/>

::: fragment
<br/>

![](images/packages.png){fig-align="center" width="1000"}
:::

# Why TIDY data?

## Tidyverse

::: fragment
From the hand of the family of packages called [Tidyverse](https://www.tidyverse.org/), the "tidy data" framework changed the way we code and work in R for data science. Tidy datasets are easy to manipulate, model and visualize, and have a specific structure [@wickham2014]:
:::

-   Each variable is a column,

-   Each observation is a row, and

-   Each value have its own cell.

::: fragment
![](images/tidy-1.png) <br/>

**Tidy-data structure**. Following three rules makes a dataset tidy: variables are in columns, observations are in rows, and values are in cells. Source: Wickham (2017).
:::

## Free HTML books

::: {layout-ncol="2"}
[![](https://d33wubrfki0l68.cloudfront.net/b88ef926a004b0fce72b2526b0b5c4413666a4cb/24a30/cover.png){height="300"}](https://r4ds.had.co.nz/)

[![](https://www.tmwr.org/images/cover.png){height="300"}](https://www.tmwr.org/)
:::

## Summary & Key Takeaways

-   Data literacy and reproducibility are essential in modern agriculture.
-   Reproducible analyses build credibility and foster collaboration.

------------------------------------------------------------------------

## THANK YOU!

acorrend\@uoguelph.ca

::: {style="text-align: right; font-size: 0.75em"}
Adrian A. Correndo\
Assistant Professor\
Sustainable Cropping Systems\
Department of Plant Agriculture\
University of Guelph\
:::

Rm 226, Crop Science Bldg \| Department of Plant Agriculture

Ontario Agricultural College \| University of Guelph \| 50 Stone Rd E, Guelph, ON-N1G 2W1, Canada.

<br/>

### Contact me

|                                                                                               |                                                                                                                                          |                                                                                                                            |
|--------------------|----------------------------|-------------------------|
| [![](images/X_logo.png.webp){fig-align="center" width="60"}](http://twitter.com/aacorrendo)   | [![](images/linkedin-icon.png){fig-align="center" width="60"}](https://www.linkedin.com/in/adriancorrendo/)                              | [![](images/github-brands.svg){fig-align="center" width="60" height="60"}](http://github.com/adriancorrendo)               |
| [![](images/orcid.png){fig-align="center" width="60"}](https://orcid.org/0000-0002-4172-289X) | [![](images/768px-Google_Scholar_logo.png){fig-align="center" width="60"}](https://scholar.google.com/citations?user=4h88EXkAAAAJ&hl=en) | [![](images/ResearchGate_icon.png){fig-align="center" width="60"}](https://www.researchgate.net/profile/Adrian-Correndo-2) |
