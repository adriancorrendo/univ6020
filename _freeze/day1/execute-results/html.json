{
  "hash": "1892b60c38b325afdc449afa1a7345f3",
  "result": {
    "markdown": "---\ntitle: \"Reproducible Data Science with R\"\nauthor: \"Adrian A. Correndo\"\ndate: \"2024-11-04\"\neditor: source\nformat:\n  revealjs: \n    incremental: true\n    slide-number: true\n    show-slide-number: all\n    toc: true\n    toc_float: true\n    toc-depth: 1\n    toc-location: body\n    toc-title: \"Contents\"\n    smaller: true\n    scrollable: true\nhighlight-style: oblivion  \n---\n\n\n## Welcome üëã\n\n-   **Goal**: Gain foundational knowledge and understand how data science can improve agricultural practices.\n-   Let's dive into it with an emphasis on reproducibility and data literacy.\n\n::: fragment\n::: callout-tip\n-   **Remember**: Questions and discussions are encouraged! üí¨\n:::\n:::\n\n## Objectives for Today üìå\n\n-   Define core concepts:\n    -   Data Science,\n    -   Data Literacy,\n    -   Reproducibility.\n-   Understand the role of **reproducible data science** in agriculture.\n-   Explore **challenges** and **opportunities**.\n\n# Core concepts\n\n## What is Data Science in Agriculture? üå±\n\n-   Applying data engineering, analysis, statistics, and machine learning to solve agricultural problems.\n-   **Examples**: Precision agriculture, yield forecasting, environmental monitoring.\n\n## Key Definitions üìñ\n\n::: columns\n::: {.column width=\"55%\"}\n-   **Data Science**: Extracting insights from data using algorithms and statistical methods. <br/>\n\n-   **Data Literacy**: Skills to read, interpret, and analyze data. <br/>\n\n-   **Reproducibility**: Ensuring analyses can be recreated by others.\n:::\n\n::: {.column width=\"45%\"}\n::: fragment\n::: callout-note\n**Why does reproducibility matter?**\n\n-   Trustworthy results,\n\n-   transparency, &\n\n-   collaboration in research.\n:::\n:::\n:::\n:::\n\n## Challenges in Data Literacy üåê\n\n-   Diverse data sources (weather, soil, crop data)\n-   Standardization issues across datasets\n-   Data skills gap among ag professionals\n\n## Why does it matter?\n\n::: {.column width=\"55%\"}\n-   It is the **#1 skill-gap** in the job market: <br/>\n\n    -   Academia,\n    -   Industry,\n    -   Government, NGOs, etc.\n:::\n\n::: {.column width=\"45%\"}\n![](images/reproducibility.png){.absolute top=\"0\" right=\"0\" height=\"65%\"}\n:::\n\n-   Is there a REPRODUCIBILITY CRISIS in science?\n\n-   A [Nature survey](https://www.nature.com/articles/533452a) with \\~1,600 researchers found that\n\n    -   ***+70%*** failure rate to reproduce another scientist's experiments\n\n    -   ***+50%*** have failed to reproduce their own experiments\n\n    -   ***Main causes***: selective reporting, weak stats, code/data unavailability, etc.\n\n## GOOD NEWS IS...\n\n::: fragment\n::: {.column width=\"100%\"}\n![](images/repbrush.png){.absolute top=\"50\" left=\"200\" height=\"100%\"}\n:::\n:::\n\n## **Why Reproducibility in Agriculture?**\n\n-   Agriculture research relies heavily on environmental data, often variable and complex.\n\n-   **We have complex challenges** üóíÔ∏è\n\n    -   Variability due to environmental factors, soil types, and weather patterns.\n    -   Complex datasets involving long-term studies, geographical variability.\n\n-   **Opportunities** ‚úÖ\n\n    -   Reproducibility helps stakeholders make reliable, data-driven decisions.\n    -   Ensures scientific findings are reliable and valid.\n    -   Facilitates collaboration, accountability, and efficiency among researchers and practitioners.\n\n## Challenges in [Ag-research]{style=\"color:forestgreen\"}\n\n::: fragment\n### [REPRODUCIBILITY]{style=\"color:#2a9d8f\"} üíª\n\n-   Limited capability to reproduce analyses & results\n\n-   DATA are rarely shared, CODES even less\n:::\n\n::: fragment\n### [ACCESSIBILITY]{style=\"color:#023e8a\"} üì≤\n\n-   Yet we are not translating enough science into flexible, and transparent decision tools.\n:::\n\n::: fragment\n\"But it all starts with ...\"\n:::\n\n::: fragment\n### [EDUCATION]{style=\"color:#BA0C2F\"} üéì\n\n-   Limited curriculum in applied data science\n:::\n\n## Discussion Prompt üí¨\n\n::: fragment\n<br/>\n\n### i. Where do you think improved data literacy & reproducibility could impact agriculture the most? {style=\"color:#bc4749\"}\n\n<br/>\n:::\n\n::: fragment\n::: callout-tip\n-   Consider areas like resource management, market predictions, and farm management.\n:::\n:::\n\n::: fragment\n<br/>\n\n### ii. What practical challenges do you face (or may) in implementing them? {style=\"color:#457b9d\"}\n\n<br/>\n:::\n\n# What is R?\n\n::: fragment\n## What is R? üßÆ\n\n-   **R** is a programming language and environment primarily for statistical analysis, data visualization, and data science.\n-   Known for its extensive **statistical libraries**, **data manipulation capabilities**, and **graphics**.\n-   Widely used in fields like **data science**, **bioinformatics**, **agriculture**, and **social sciences**.\n:::\n\n<br/>\n\n::: fragment\n### Brief History of R üìú\n\n-   **Origin**: Developed in the early 1990s by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand.\n-   **Inspiration**: R is an implementation of the S language, designed at Bell Laboratories for data analysis.\n-   **Open Source**: Released as free, open-source software, leading to a large community of users and contributors.\n-   **Popularity**: Today, R is one of the top programming languages for statistical analysis and data science.\n:::\n\n# Alternatives to R\n\n## R vs. Excel for Data Wrangling üìä\n\n::: columns\n::: {.column width=\"65%\"}\n-   **Excel**: Known for ease of use, popular among business and finance professionals.\n    -   **Pros**: Intuitive, good for small datasets and quick analysis.\n    -   **Cons**: Limited in handling large datasets, lacks reproducibility.\n-   **R**: Provides powerful data manipulation packages (e.g., `dplyr`, `tidyr`).\n    -   **Pros**: Handles large datasets efficiently, supports complex transformations, fully reproducible.\n    -   **Cons**: Requires programming knowledge, steeper learning curve than Excel.\n:::\n\n::: {.column width=\"35%\"}\n![](https://upload.wikimedia.org/wikipedia/commons/3/34/Microsoft_Office_Excel_%282019‚Äìpresent%29.svg){fig-align=\"right\" width=\"290\"}\n:::\n:::\n\n::: fragment\n::: callout-tip\n-   **Tip**: R is highly scalable and is ideal for projects requiring automation, reproducibility, and handling large datasets.\n:::\n:::\n\n## R vs. SAS for Statistical Analysis üìâ\n\n::: columns\n::: {.column width=\"65%\"}\n-   **SAS**: A powerful statistical software suite used widely in industries such as healthcare and finance.\n    -   **Pros**: Robust for regulatory environments, highly standardized.\n    -   **Cons**: Proprietary and costly, limited community contributions.\n-   **R**: Offers a vast array of statistical packages and flexibility in method implementation.\n    -   **Pros**: Free and open-source, customizable, strong community support.\n    -   **Cons**: Requires more coding and configuration for regulatory standards.\n:::\n\n::: {.column width=\"35%\"}\n![](images/SASlogo.svg){fig-align=\"right\" width=\"290\" title=\"By SAS Institute - http://www.sas.com, Public Domain, https://commons.wikimedia.org/w/index.php?curid=5291445\"}\n:::\n\n::: fragment\n::: callout-note\n-   **Comparison**: R is often chosen for research and academia due to its flexibility and customization, while SAS remains strong in industries needing strict compliance and control.\n:::\n:::\n:::\n\n## R vs Python vs Julia üîç\n\n-   R, Python, and Julia are popular languages in data science and research.\n-   Each language has unique strengths, ideal use cases, and licensing considerations.\n\n::: columns\n::: {.column width=\"34%\"}\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/R_logo.svg/1448px-R_logo.svg.png?20240131042527){fig-align=\"right\" width=\"290\"}\n:::\n\n::: {.column width=\"33%\"}\n![](https://upload.wikimedia.org/wikipedia/commons/c/c3/Python-logo-notext.svg){fig-align=\"right\" width=\"290\"}\n:::\n\n::: {.column width=\"33%\"}\n![](https://upload.wikimedia.org/wikipedia/commons/1/1f/Julia_Programming_Language_Logo.svg){fig-align=\"right\" width=\"290\"}\n:::\n:::\n\n## R: Strengths and Use Cases üßÆ\n\n::: columns\n::: {.column width=\"65%\"}\n-   **Designed for Statistics**: R is optimized for statistical analysis, making it ideal for research and academia.\n-   **Visualization**: Excellent data visualization libraries like `ggplot2`.\n-   **Licensing**: Licensed under **GPL**; many packages are also GPL, with some using MIT or BSD.\n\n::: fragment\n### Ideal Use Cases:\n\n-   Data analysis, visualization, and complex statistical modeling.\n-   Research and academia where open-source, reproducible code is needed.\n-   **Licensing in Production**: GPL may restrict proprietary use; check package licenses carefully.\n:::\n:::\n\n::: {.column width=\"35%\"}\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/R_logo.svg/1448px-R_logo.svg.png?20240131042527){fig-align=\"right\" width=\"290\"}\n:::\n:::\n\n## Python: Strengths and Use Cases üêç\n\n::: columns\n::: {.column width=\"65%\"}\n-   **General-Purpose Language**: Python is popular for both data science and software development.\n-   **Machine Learning & AI**: Extensive libraries for ML and AI, such as `scikit-learn`, `TensorFlow`.\n-   **Licensing**: PSFL (Python Software Foundation License), highly permissive for proprietary use.\n\n::: fragment\n### Ideal Use Cases:\n\n-   End-to-end development, from data wrangling to ML and web development.\n-   Production-ready ML and AI applications.\n-   **Licensing in Production**: Permissive licenses allow closed-source use, making Python production-friendly.\n:::\n:::\n\n::: {.column width=\"33%\"}\n![](https://upload.wikimedia.org/wikipedia/commons/c/c3/Python-logo-notext.svg){fig-align=\"right\" width=\"290\"}\n:::\n:::\n\n## Julia: Strengths and Use Cases üöÄ\n\n::: columns\n::: {.column width=\"65%\"}\n-   **High Performance**: Designed for scientific computing, close to the speed of C/C++.\n-   **Ease of Use**: Combines high-level syntax with low-level performance.\n-   **Licensing**: MIT license, very permissive for commercial and open-source use.\n\n::: fragment\n### Ideal Use Cases:\n\n-   Large-scale simulations, optimization problems, high-performance computing.\n-   **Licensing in Production**: MIT license allows proprietary use without restrictions.\n:::\n:::\n\n::: {.column width=\"33%\"}\n![](https://upload.wikimedia.org/wikipedia/commons/1/1f/Julia_Programming_Language_Logo.svg){fig-align=\"right\" width=\"290\"}\n:::\n:::\n\n## Comparison Summary üìä\n\n::: fragment\n::: callout-note\n-   **R**: Open-source, powerful for data science, statistical analysis, and visualizations.\n-   **Excel**: User-friendly, ideal for simple tasks, but limited for complex data wrangling.\n-   **SAS**: Industry-standard for statistical analysis with regulatory requirements, but costly and less flexible than R.\n:::\n:::\n\n<br/>\n\n::: fragment\n| Feature              | R                           | Python                        | Julia                         |\n|------------------|------------------|-------------------|------------------|\n| **Primary Strength** | Statistics & Visualization  | General-purpose, ML, AI       | High-performance computing    |\n| **Performance**      | Moderate                    | Moderate                      | High                          |\n| **Licensing**        | GPL (core), MIT, BSD (some) | PSFL, highly permissive       | MIT, highly permissive        |\n| **Production Use**   | Limited by GPL              | Very friendly for proprietary | Very friendly for proprietary |\n:::\n\n<br/>\n\n::: fragment\n::: callout-tip\n-   **R**: Best for statistical analysis and visualization, but GPL license may restrict use in proprietary products.\n-   **Python**: Strong in ML and AI with highly permissive licensing, making it ideal for production.\n-   **Julia**: Excellent for high-performance computing, with permissive licensing suitable for proprietary use.\n:::\n:::\n\n::: fragment\nChoosing the right tool depends on your project's requirements, team skills, and licensing needs for research vs. production.\n:::\n\n------------------------------------------------------------------------\n\n# Why R?\n\n\n## Why R?\n\n::: columns\n::: {.column width=\"70%\"}\n-   **1. Open-Source**\n    -   Free to use and modify, with contributions from a large community.\n-   **2. Multi-Platform**\n    -   Runs on Windows, macOS, and Linux, making it versatile for collaboration.\n-   **3. Community Support**\n    -   Strong online help through forums, tutorials, and dedicated resources.\n-   **4. Continuous Development**\n    -   Regular updates keep R on the leading edge of data science.\n-   **5. Reproducible Workflows**\n    -   Tools like **Rmarkdown** and **Quarto** facilitates the job.\n:::\n\n::: {.column width=\"30%\"}\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/R_logo.svg/1448px-R_logo.svg.png?20240131042527){fig-align=\"right\" width=\"290\"}\n:::\n:::\n\n## Why RStudio?\n\n::: columns\n::: {.column width=\"70%\"}\n-   **1. An interface to R**\n    -   Provides a user-friendly environment to work with R.\n-   **2. Integrates various components of an analysis**\n    -   Combines data, code, and output in one place, simplifying the workflow.\n-   **3. Colored syntax**\n    -   Highlights code with colors, making it easier to read and spot errors, improving code clarity.\n-   **4. Syntax suggestions**\n    -   Offers autocomplete suggestions, which speeds up coding and reduces mistakes.\n-   **5. RStudio panels**\n    -   Panels for console, scripts, files, and plots, giving quick access to all elements.\n:::\n\n::: {.column width=\"30%\"}\n![](https://upload.wikimedia.org/wikipedia/commons/d/d0/RStudio_logo_flat.svg){fig-align=\"right\" width=\"400\"}\n:::\n:::\n\n## Rstudio panels\n![](images/rstudiopanel.png)\n\n## Why version control? üîÑ\n\n::: columns\n::: {.column width=\"70%\"}\n-   **1. Track Changes**\n    -   Maintain a complete history of edits, making it easy to identify when and why changes were made.\n-   **2. Collaborate Seamlessly**\n    -   Multiple users can work together without overwriting each other's work, enhancing teamwork.\n-   **3. Ensure Data Integrity**\n    -   Protect primary data by using branches for experimentation, avoiding accidental overwrites.\n-   **4. Boost Reproducibility**\n    -   Access exact versions of code and data, enabling others to reproduce your work reliably.\n-   **5. Provide Built-in Documentation**\n    -   Each change can be documented, helping others understand your workflow and decisions.\n:::\n\n::: {.column width=\"30%\"}\n![](https://upload.wikimedia.org/wikipedia/commons/e/e0/Git-logo.svg){fig-align=\"right\" width=\"400\"}\n\n<br/>\n\n![](images/GitHub-logo.png){fig-align=\"right\" width=\"400\"}\n:::\n:::\n\n## What are Git and GitHub?\n\n::: columns\n::: {.column width=\"70%\"}\n-   **Git**\n    -   A version control system that tracks changes in files on your local computer, allowing you to manage versions and revert to previous work.\n\n<br/>\n\n-   **GitHub**\n    -   An online platform for hosting Git repositories, enabling easy collaboration, project sharing, and cloud storage.\n:::\n\n::: {.column width=\"30%\"}\n![](https://upload.wikimedia.org/wikipedia/commons/e/e0/Git-logo.svg){fig-align=\"right\" width=\"400\"}\n\n<br/>\n\n![](images/GitHub-logo.png){fig-align=\"right\" width=\"400\"}\n:::\n:::\n\n## Key Principles for Reproducibility\n\n-   **Documentation and Code Comments**\n    -   Metadata: information about data origin, format, structure, and meaning.\n    -   Code comments: provide explanations directly in scripts for future reference.\n-   **Version Control (Git/GitHub)**\n    -   Tracks changes to code over time, making it easy to return to previous versions.\n    -   Useful for collaborative work and transparency.\n-   **Organization & Structured coding...**\n\n## Basic Project Structure\n\n-   **Organizing Projects for Reproducibility**\n\n    -   Folder setup: `data/`, `code/`, `results/` folders for logical organization.\n    -   README file: brief guide to project structure, data sources, and analysis steps.\n\n-   **Sample Project Structure**\n\n    ```         \n    project_directory/\n    ‚îú‚îÄ‚îÄ data/       # Raw and processed datasets\n    ‚îú‚îÄ‚îÄ code/    # Code files for data processing\n    ‚îú‚îÄ‚îÄ results/    # Generated results, plots, and reports\n    ‚îú‚îÄ‚îÄ README.md   # Overview of the project structure and purpose\n    ```\n\n![](images/projectfolders.png)\n\n\n# Essentials of R üîç\n\n-   Let's cover the core building blocks of R for data science.\n\n## Objectives üìå\n\n-   Types of R objects and their uses.\n-   Key functions and data wrangling basics.\n-   Tidy data concepts.\n\n## Common R Objects üß©\n\n-   **Scalars**: Single data point (e.g., `5`, or `a`)\n-   **Vectors**: Simple data storage (e.g., `c(1, 2, 3)`)\n-   **Lists**: Collection of various data types\n-   **Dataframes**: Tabular data (like spreadsheets)\n-   **Tibbles**: Enhanced dataframes with cleaner output\n-   **Matrices**: data arranged in rows and columns (2D)\n\n## Object\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\n20\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20\n```\n:::\n\n```{.r .cell-code}\n20/4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n:::\n\n::: fragment\nUse `<-` or `=`\n:::\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 20/4\n\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n:::\n\n## Vector\n\nIt's a collection of numbers, arithmetic expressions, logical values or character strings for example. Within a table, it could be a row or a column\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\n# numeric\nb <- c(3, 6, 10)\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  3  6 10\n```\n:::\n\n```{.r .cell-code}\nc <- \"Workshop\"\nc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Workshop\"\n```\n:::\n:::\n\n:::\n\n## Tabular data\n\n::: fragment\n### 1. Data Frame\n\nIt's a `tabular` arrange of vectors (i.e. 2-dimensional, rectangular). Structure used to store values of any data type. The most common way to store data in R.\n:::\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- data.frame(Number = b,\n                ID = c)\n\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Number       ID\n1      3 Workshop\n2      6 Workshop\n3     10 Workshop\n```\n:::\n:::\n\n:::\n\n::: fragment\n<br/>\n\n### 2. Tibble\n\nIt's a modern version of a data frame. It's a data frame with class `tbl_df` and `tbl` and it only prints the first 10 rows and all the columns that fit on the screen.\n:::\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\ntb <- tibble::as_tibble(d)\n\ntb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 √ó 2\n  Number ID      \n   <dbl> <chr>   \n1      3 Workshop\n2      6 Workshop\n3     10 Workshop\n```\n:::\n:::\n\n:::\n\n## Matrix\n\nA collection of elements of the same data type (numeric, character, or logical) arranged into a fixed number of rows and columns.\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- matrix(c(b,b),\n            nrow = 2)\n\nm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    3   10    6\n[2,]    6    3   10\n```\n:::\n:::\n\n:::\n\n## List\n\n-   A generic object consisting of an ordered collection of objects. <br/>\n\n-   Lists are one-dimensional, heterogeneous data structures. <br/>\n\n-   The list can be a list of vectors, matrices, characters, functions, etc... <br/>\n\n-   A list is a vector but with heterogeneous data elements.\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- list(\"a\" = a, \"b\" = b,\n          \"c\" = c, \"d\" = d)\nf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$a\n[1] 5\n\n$b\n[1]  3  6 10\n\n$c\n[1] \"Workshop\"\n\n$d\n  Number       ID\n1      3 Workshop\n2      6 Workshop\n3     10 Workshop\n```\n:::\n\n```{.r .cell-code}\nclass(f)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"list\"\n```\n:::\n:::\n\n:::\n\n## Functions ‚öôÔ∏è\n\n::: fragment\n-   A function is a block of code that performs a specific task. <br/>\n-   Types:\n    -   **Pre-built functions**: e.g., `mean()`, `sum()`\n    -   **Custom functions**: How to define and use\n:::\n\n::: fragment\n::: callout-tip\n-   Functions make code reusable and organized. Define once, use often! üí°\n-   A function is executed when it is **called**. <br/>\n-   You can pass data, numbers, lists, dataframes, matrices, etc... <br/>\n:::\n:::\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\narguments <- NULL \nfx <- function(arguments) {\n        ## Do something\n}\n```\n:::\n\n:::\n\n::: fragment\nExample of a function to calculate the mean\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfx <- function(x, ...) {\n        mean(x)\n}\n\nfx(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6.333333\n```\n:::\n:::\n\n:::\n\n## Argument\n\nAn argument is a value you pass to a function when calling it. <br/>\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nb2 <- c(3, 6, 10, NA)\nb2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  3  6 10 NA\n```\n:::\n\n```{.r .cell-code}\nfx(b2, na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\n# The order of the arguments is important\n# But it can be overriden by calling the name of the argument\nfx(na.rm = T, x = b2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n:::\n\n## Packages\n\nA package is a collection of R functions, data sets, and compiled code in a well-defined format. <br/>\n\n-   Packages are intended to solve specific problems or perform specific tasks. <br/>\n\n-   There are currently thousands of packages available (+21,000 on CRAN only). <br/>\n\n::: fragment\n<br/>\n\n![](images/packages.png){fig-align=\"center\" width=\"1000\"}\n:::\n\n# Why TIDY data?\n\n## Tidyverse\n\n::: fragment\nFrom the hand of the family of packages called [Tidyverse](https://www.tidyverse.org/), the \"tidy data\" framework changed the way we code and work in R for data science. Tidy datasets are easy to manipulate, model and visualize, and have a specific structure [@wickham2014]:\n:::\n\n-   Each variable is a column,\n\n-   Each observation is a row, and\n\n-   Each value have its own cell.\n\n::: fragment\n![](images/tidy-1.png) <br/>\n\n**Tidy-data structure**. Following three rules makes a dataset tidy: variables are in columns, observations are in rows, and values are in cells. Source: Wickham (2017).\n:::\n\n## Free HTML books\n\n::: {layout-ncol=\"2\"}\n[![](https://d33wubrfki0l68.cloudfront.net/b88ef926a004b0fce72b2526b0b5c4413666a4cb/24a30/cover.png){height=\"300\"}](https://r4ds.had.co.nz/)\n\n[![](https://www.tmwr.org/images/cover.png){height=\"300\"}](https://www.tmwr.org/)\n:::\n\n## Summary & Key Takeaways\n\n-   Data literacy and reproducibility are essential in modern agriculture.\n-   Reproducible analyses build credibility and foster collaboration.\n\n------------------------------------------------------------------------\n\n## THANK YOU!\n\nacorrend\\@uoguelph.ca\n\n::: {style=\"text-align: right; font-size: 0.75em\"}\nAdrian A. Correndo\\\nAssistant Professor\\\nSustainable Cropping Systems\\\nDepartment of Plant Agriculture\\\nUniversity of Guelph\\\n:::\n\nRm 226, Crop Science Bldg \\| Department of Plant Agriculture\n\nOntario Agricultural College \\| University of Guelph \\| 50 Stone Rd E, Guelph, ON-N1G 2W1, Canada.\n\n<br/>\n\n### Contact me\n\n|                                                                                               |                                                                                                                                          |                                                                                                                            |\n|--------------------|----------------------------|-------------------------|\n| [![](images/X_logo.png.webp){fig-align=\"center\" width=\"60\"}](http://twitter.com/aacorrendo)   | [![](images/linkedin-icon.png){fig-align=\"center\" width=\"60\"}](https://www.linkedin.com/in/adriancorrendo/)                              | [![](images/github-brands.svg){fig-align=\"center\" width=\"60\" height=\"60\"}](http://github.com/adriancorrendo)               |\n| [![](images/orcid.png){fig-align=\"center\" width=\"60\"}](https://orcid.org/0000-0002-4172-289X) | [![](images/768px-Google_Scholar_logo.png){fig-align=\"center\" width=\"60\"}](https://scholar.google.com/citations?user=4h88EXkAAAAJ&hl=en) | [![](images/ResearchGate_icon.png){fig-align=\"center\" width=\"60\"}](https://www.researchgate.net/profile/Adrian-Correndo-2) |\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}